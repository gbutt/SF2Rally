<apex:page applyHtmlTag="false" showHeader="false" sidebar="false" standardStylesheets="true" standardController="Case2Rally_Setup__c"> <!-- standardController="Case2Rally_Setup__c" -->
<html>
<head>
	<!-- (c) 2009 Rally Software Development Corp. All rights reserved. -->
	<title>Rally Setup Defect Fields</title>
	<c:jquery />
	<script src="/soap/ajax/15.0/connection.js" type="text/javascript"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/mustache.js/2.1.3/mustache.js"></script>
	<apex:includeScript value="{!URLFOR($Resource.Case2Rally, '/js/fieldMapper.js')}"></apex:includeScript>
	<script type="text/javascript">
		var my = {};
		
		j$(function(){
			rally.apiKey = '{!$Setup.Case2Rally__c.API_Key__c}';
			sforce.connection.sessionId = '{!$Api.Session_ID}';
			var dfm = new rally.dfm();
			var setupID = "{!Case2Rally_Setup__c.Id}";
			var workspaceName = '{!Case2Rally_Setup__c.Name}';
			var rallySchema;

			var init = function() {
				// current field mapping for defects
				var defectFieldMap = getDefectFieldMap();

				// fields from the case object in SF
				var caseFields = sforce.connection.describeSObject("Case").fields
					.filter(function(element){return !element.referenceTo;})
					.sort(sortByKey('label'));

				// get rally schema
				rally.init();
				rally.getWorkspaceOid(workspaceName);
				dfm.fm.getArtifactTypeDef(rally.workspaceRef);
				rallySchema = schemaArrayToMap(dfm.fm.rallySchema);
				
		    	displayForm(rallySchema, caseFields, defectFieldMap);
				// export
				my.saveSettings = saveSettings;
				my.toggleInputEnabled = toggleInputEnabled;
			}

			var getDefectFieldMap = function() {
				try {
					return JSON.parse('{!Case2Rally_Setup__c.Defect_Field_Map__c}');
				} catch (e) {  /* bad JSON */ 
					return {};
				}
			} 

			var schemaArrayToMap = function(rallySchema){
				var map = {}, typeBlackList=['COLLECTION', 'OBJECT'];
				var attributeWhitelist = [
					"FoundInBuild",
					"Severity",
					"Priority",
					"Environment",
					"Description",
					"Name",
					"Package",
					"Owner",
					"Release"
				];
				j$.each(rallySchema, function(key, val){
					if (!val.ReadOnly && typeBlackList.indexOf(val.AttributeType) === -1 && (val.Custom || attributeWhitelist.indexOf(val.ElementName) > -1)){
						map[val.ElementName] = val;	
					}
				});
				return map;
			}

			var sortByKey = function (key) {
				return function(a, b) {
					return (a[key] < b[key]) ? -1 : ((a[key] > b[key]) ? 1 : 0);
				};
			};

			var prettyLabel = function(attrType){
				return attrType
					.replace('_',' ')
					.toLowerCase()
					.replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); })
			}

			var getOrderedFields = function(rallySchema){
				var standardFields = [],
					customFields = [];
				j$.each(rallySchema, function(key, val){
					if (val.Custom){
						customFields.push(val);
					} else {
						standardFields.push(val);
					}
				});
				return standardFields.sort(sortByKey('Name')).concat(customFields.sort(sortByKey('Name')));
			}

			var renderView = function(viewSelector, model){
				var template = j$(viewSelector).html();
				return Mustache.render(template, model);
			}

			var displayForm = function(rallySchema, caseFields, sfToRallyFieldMap) {
				var model = {
					rows:[]
				};
				var allRallyFields = getOrderedFields(rallySchema);
				j$.each(allRallyFields, function(i, rallyField){
					var rallyFieldCode = rallyField.ElementName;
					var allowedValues = (Array.isArray(rallyField.AllowedValues) && rallyField.AllowedValues.length > 0) ? rallyField.AllowedValues : [];
					var rallyFieldType = prettyLabel(rallyField.AttributeType);
					var fieldMap = sfToRallyFieldMap[rallyFieldCode] || {fldValue:'',literalValue:''};
					var caseFieldOptions = [];
					if (!rallyField.Required){
						caseFieldOptions.push({name: 'None', label: '' });	
					}
					caseFieldOptions.push({name: 'Default', label: '<Default Value>' });
					caseFieldOptions = caseFieldOptions.concat(caseFields);
					var row = {
						rallyFieldCode: rallyFieldCode,
						caseField:{
							options: caseFieldOptions
						}, 
						defaultField:{
							literalValue: fieldMap.literalValue,
							allowedValues: allowedValues
						},
						rallyFieldName: rallyField.Name,
						rallyFieldType: rallyFieldType,
						caseFieldSelected: function() {
							return fieldMap.fldValue === this.name;
						},
						defaultFieldSelected: function() {
							return fieldMap.literalValue === this.StringValue;
						},
						defaultFieldSelect: function() {
							return allowedValues.length > 0;
						},
						defaultFieldInput: function() {
							return allowedValues.length == 0;
						},
						defaultFieldDisabled: function() {
							return fieldMap.fldValue !== 'Default';
						}
					}
					model.rows.push(row);
				});
				
				j$('#defectMapFormID').html(renderView('#rallyView', model));
				j$('#saveSettings').on('click', function(){
					my.saveSettings(this);
				});
			}

			// used by Save Settings button
			var saveSettings = function(element) {
				try {
					element.style.cursor='wait';
					dfm.fm.saveMapping(setupID);
					j$('#saveStatus').html('Saved Successfully.');
				} catch (exception) {
					console.log(exception);
					j$('#saveStatus').html('Save Failed.');
				} finally {
					element.style.cursor='auto';
				}
			};

			var toggleInputEnabled = function(fldValue, inputName) {
				var input = j$('[name='+inputName+']');
				if (fldValue !== 'Default') {
					input.attr('disabled', '');
				} else {
					input.removeAttr('disabled');
				}
			}

			var saveMapping = function () {
		      var mapToSave = {};
		      var fields = rallySchema;
		      j$.each(fields, function(i, field){
		        var literalValue = "";
		        var code = field.ElementName;
		        var row = {}
		        row.fldValue = j$('[name="' + code + '_fld' + '"]').val();
		        if (row.fldValue == "Default") {
		          row.literalValue = j$('[name="' + code + '_literal' + '"]').val();
		        }
		        if (row.fldValue !== 'None'){
		          mapToSave[code] = row;  
		        }
		      });

		      var _tmpobj = new sforce.SObject('Case2Rally_Setup__c');
		      _tmpobj.Id = caseId;
		      _tmpobj[this.SFQryField] = JSON.stringify(mapToSave);

		      sforce.connection.update([_tmpobj]);
		    };

			init();
		});



</script>

<script id="rallyView" type="x-tmpl-mustache">
	<table class="list" style="font-size:100%;">
		<tr class="headerRow">
			<th>Salesforce Field</th>
			<th>Default Value</th>
			<th>Rally Field</th>
			<th>Rally Type</th>
		</tr>
		{{#rows}}
		<tr class="dataRow">
			<td class="dataCell">
				<select name="{{rallyFieldCode}}_fld" onchange="my.toggleInputEnabled(this.value, '{{rallyFieldCode}}_literal');">
				{{#caseField.options}}
					<option {{#caseFieldSelected}}selected{{/caseFieldSelected}} value="{{name}}">{{label}}</option>
				{{/caseField.options}}
				</select>
			</td>
			<td class="dataCell">
				{{#defaultFieldSelect}}
					<select name="{{rallyFieldCode}}_literal" {{#defaultFieldDisabled}}disabled{{/defaultFieldDisabled}}>
					{{#defaultField.allowedValues}}
						<option {{#defaultFieldSelected}}selected{{/defaultFieldSelected}} value="{{StringValue}}">{{StringValue}}</option>
					{{/defaultField.allowedValues}}
					</select>
				{{/defaultFieldSelect}}
				{{#defaultFieldInput}}
					<input name="{{rallyFieldCode}}_literal" value="{{defaultField.literalValue}}" {{#defaultFieldDisabled}}disabled{{/defaultFieldDisabled}} />
				{{/defaultFieldInput}}
			</td>
			<td class="dataCell">
				{{rallyFieldName}}
			</td>
			<td class="dataCell">
				{{rallyFieldType}}
			</td>
		</tr>
		{{/rows}}
	</table>
	<input id="saveSettings" type="button" class="btn" name="Save Settings" value="Save Settings" />
	<div id="saveStatus" />
</script>
</head>
<body class="bWizardList">
	<div class="bRelatedList pbSubsection">
		<div class="bPageBlock secondaryPalette">
			<div class="pbHeader">
				<table class="list" border="0" cellspacing="0" cellpadding="0"
				style="background-color: transparent; border-color: #5B77CC; font-size: 100%">
				<tr>
					<td class="dataCell" colspan="10">This screen allows Salesforce administrators to specify some field
						values of Rally defects created from support cases.<br /><br />
						Review the default mapping below, and optionally update the values in the Salesforce Field
						column.<br /><br />
						<ul>
							<li>Select &lt;None&gt; when you do not want the respective Rally defect field to be set
								from Salesforce
							</li>
							<li>Select &lt;Default Value&gt; to have all defects created from support cases use the
								value specified in the Default Value column
							</li>
							<li>Select a Salesforce case field to populate the respective Rally defect field</li>
						</ul>
						<b>IMPORTANT:</b> When selecting Salesforce case fields of type Picklist,
						ensure that the Picklist values exactly match the Rally values in the
						Allowed Values column. For the Rally Owner field, the Default Value must
						be expressed as a Rally username (ex: bill@abc.com).
					</td>
				</tr>
				<tr>
					<td colspan="10">&nbsp;</td>
				</tr>
			</table>
		</div>
		<div class="pbBody">
			<form name="defectMapForm" id="defectMapFormID"></form>
		</div>
		<div class="pbFooter"></div>
	</div>
</div>
</body>
</html>

</apex:page>